*Strcpy:*
*Copia* la stringa src in dest.
Variabili: src, dest.
Ritorna dest.
Dà per scontato che dest sia maggiore di src.
Se così non è, il programma avrà un comportamento indefinito, che varia tra il crash del programma, la sovrascrittura involontaria della memoria, o la corruzione della stessa.
La stringa termina con un carattere vuoto.
Implementazione:
#include <string.h>
strcpy(dest, src);

--+--+--+--+--+--+--+--+--+--+--+--+--+--+-
*Strncpy:*

*Copia* la stringa src in dest.
Variabili: src, dest, size.
Ritorna dest.
Se dest è più piccolo di src, vedi strcpy.
Se src > size, ferma la copia SENZA mettere un carattere vuoto alla fine.
Se src == size, viene copiato src senza problemi.
Se src < size, tutti gli altri elementi di dest vengono riempiti con un carattere vuoto.
Implementazione:
#include <string.h>
strncpy(dest, src, size);

--+--+--+--+--+--+--+--+--+--+--+--+--+--+-

*Strlcpy:*
*Copia* la stringa src in dest.
Si assicura che ci sia sempre un carattere vuoto a fine stringa.
Variabili: src, dest, size.
Ritorna la grandezza di src.
Vengono copiati size - 1 caratteri (size include il carattere vuoto).
Se dest è più piccolo di src, vedi strcpy.
Se src > size, size ferma la copia e mette un carattere vuoto alla fine.
Se src == size, viene copiato src senza problemi.
Se src < size, SOLO l'ultimo elemento di dest viene riempito con un carattere vuoto.
Alla fine della funzione, viene fatto tornare size.
Implementazione:
#include <bsd/string.h>
COMPILA CON -lbds dopo nome .
strlcpy(dest, src, size);

--+--+--+--+--+--+--+--+--+--+--+--+--+--+-

*strcmp:*
*Confronta* la stringa src con dest.
Variabili: src, dest.
Restituisce un int pari, minore o uguale a 0, in base alla differenza in ASCII tra il valore delle due stringhe.
ATTENZIONE: Viene controllato solo e soltanto il primo elemento diverso.
 (str1[0] - str2[0]) OPPURE  (str1[1] - str2[1]) ...e così via.
Il confronto continua finchè una delle due stringhe finisce.
Se una delle due è vuota, viene comunque calcolata la differenza, usando come parametro per la stringa vuota il carattere nullo.
Se invece entrambe sono nulle, il ritorno è zero.
Implementazione:
#include <string.h>
strcmp(str1, str2);

+--+--+--+--+--+--+--+--+--+--+--+--+--+-

*strncmp:*
*Confronta* la stringa src con dest.
Variabili: src, dest.
Restituisce un int pari, minore o uguale a 0, in base alla differenza in ASCII tra il valore delle due stringhe.
ATTENZIONE: Viene controllato solo e soltanto il primo elemento diverso.
 (str1[0] - str2[0]) OPPURE  (str1[1] - str2[1]) ...e così via.
Il confronto continua finchè una delle due stringhe finisce.
Se una delle due è vuota, viene comunque calcolata la differenza, usando come parametro per la stringa vuota il carattere nullo.
Se invece entrambe sono nulle, il ritorno è zero.
SE viene raggiunto size, il confronto termina.
Implementazione:
#include <string.h>
strncmp(str1, str2);

+--+--+--+--+--+--+--+--+--+--+--+--+--+--

*strcat:*
*Concatena* due stringhe tra loro.
Variabili: src, dest.
Restituisce dest. Se dest non è sufficientemente grande, si rischia di andare in buffer overflow. Dest deve sempre finire con un carattere nullo.
Se dest >= src + 1 (per '\0'), src viene attaccato a dest senza il carattere nullo.
Negli altri casi, si rischia l'overflow.
Implementazione:
#include <string.h>
strcat(dest, src);

+--+--+--+--+--+--+--+--+--+--+--+--+--+--

*strncat:*
*Concatena* due stringhe tra loro.
Variabili: src, dest, size.
Restituisce dest. Se dest non è sufficientemente grande, si rischia di andare in buffer overflow. Dest deve sempre finire con un carattere nullo. Size deve essere minore di dest + 1.
Concatena size elementi di src in dest.
Se dest = src + 1 (per '\0'), src viene attaccato a dest senza il carattere nullo.
Negli altri casi, si rischia l'overflow.
SE dest > src + 1, dest viene riempito da caratteri nulli.
Implementazione:
#include <string.h>
strncat(dest, src);

+--+--+--+--+--+--+--+--+--+--+--+--+--+--

*strstr:*
*Trova* una sottostringa all'interno di una stringa (esempio: hello, el; restituisce ello).
Variabili: haystack (stringa), needle (sottostringa).
Ritorna un puntatore che punta al primo elemento della sottostringa, oppure NULL se non c'è nessuna corrispondenza.
L'elemento nullo non viene comparato.
Se needle è più grande dell'haystack, il programma deve fermarsi all'elemento nullo.
È SENSIBILE alla differenza tra maiuscolo e minuscolo.
Implementazione:
#include <string.h>
IN AGGIUNTA:
#include <features.h>
#define _GNU_SOURCE
IN ALTERNATIVA A QUESTE DUE:
Sul compilatore -D_GNU_SOURCE
strstr(haystack, needle);

+--+--+--+--+--+--+--+--+--+--+--+--+--+--

*strcasestr:*
*Trova* una sottostringa all'interno di una stringa (esempio: hello, el; restituisce ello).
Variabili: haystack (stringa), needle (sottostringa).
Ritorna un puntatore che punta al primo elemento della sottostringa, oppure NULL se non c'è nessuna corrispondenza.
L'elemento nullo non viene comparato.
Se needle è più grande dell'haystack, il programma deve fermarsi all'elemento nullo.
NON È SENSIBILE alla differenza tra maiuscolo e minuscolo.
Implementazione:
#include <string.h>
IN AGGIUNTA:
#include <features.h>
#define _GNU_SOURCE
IN ALTERNATIVA A QUESTE DUE:
Sul compilatore -D_GNU_SOURCE
strcasestr(haystack, needle);
+--+--+--+--+--+--+--+--+--+--+--+--+--+--


