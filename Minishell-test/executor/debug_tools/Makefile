GDB_MACROS = ../a.gdb
VALGRIND_SUPP = ../v.supp

gdb_file:
	@echo "define a1"                         >  $(GDB_MACROS)
	@echo "	display exec->stdout_fd"        >> $(GDB_MACROS)
	@echo "	display exec->stdin_fd"         >> $(GDB_MACROS)
	@echo "	display exec->pipe_fds[0]"      >> $(GDB_MACROS)
	@echo "	display exec->pipe_fds[1]"      >> $(GDB_MACROS)
	@echo "	display fds[0]"                 >> $(GDB_MACROS)
	@echo "	display fds[1]"                 >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)
	@echo ""                                  >> $(GDB_MACROS)
	@echo "define a2"                         >> $(GDB_MACROS)
	@echo "	set \$$z = 0"                     >> $(GDB_MACROS)
	@echo "	while ((*token)[\$$z].content != (void *)0)" >> $(GDB_MACROS)
	@echo "		p (*token)[\$$z]"              >> $(GDB_MACROS)
	@echo "		set \$$z = \$$z + 1"            >> $(GDB_MACROS)
	@echo "	end"                             >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)
	@echo ""                                  >> $(GDB_MACROS)
	@echo "define a3"                         >> $(GDB_MACROS)
	@echo "	set \$$z = 0"                     >> $(GDB_MACROS)
	@echo "	while (token[\$$z].content != (void *)0)" >> $(GDB_MACROS)
	@echo "		p token[\$$z]"                >> $(GDB_MACROS)
	@echo "		set \$$z = \$$z + 1"            >> $(GDB_MACROS)
	@echo "	end"                             >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)
	@echo ""                                  >> $(GDB_MACROS)
	@echo "define l1"                         >> $(GDB_MACROS)
	@echo "	p get_next_line_bonus(fds[0])"   >> $(GDB_MACROS)
	@echo "	p sleep(1)"                      >> $(GDB_MACROS)
	@echo "	run"                             >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)
	@echo ""                                  >> $(GDB_MACROS)
	@echo "define l2"                         >> $(GDB_MACROS)
	@echo "	p get_next_line_bonus(7)"        >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)
	@echo ""                                  >> $(GDB_MACROS)
	@echo "define cmd"                        >> $(GDB_MACROS)
	@echo "	set \$$z1 = 0"                    >> $(GDB_MACROS)
	@echo "	while (exec->commands[\$$z1] != (void *)0)" >> $(GDB_MACROS)
	@echo "		set \$$z2 = 0"                >> $(GDB_MACROS)
	@echo "		p \$$z1"                       >> $(GDB_MACROS)
	@echo "		while (exec->commands[\$$z1][\$$z2] != (void *)0)" >> $(GDB_MACROS)
	@echo "			p exec->commands[\$$z1][\$$z2]" >> $(GDB_MACROS)
	@echo "			set \$$z2 = \$$z2 + 1"      >> $(GDB_MACROS)
	@echo "		end"                         >> $(GDB_MACROS)
	@echo "		set \$$z1 = \$$z1 + 1"          >> $(GDB_MACROS)
	@echo "	end"                             >> $(GDB_MACROS)
	@echo "end"                               >> $(GDB_MACROS)

valgrind_file:
	@echo "{"> $(VALGRIND_SUPP)
	@echo "   r1" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   match-leak-kinds: reachable" >> $(VALGRIND_SUPP)
	@echo "   fun:realloc" >> $(VALGRIND_SUPP)
	@echo "   obj:/usr/*" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "" >> $(VALGRIND_SUPP)
	@echo "{" >> $(VALGRIND_SUPP)
	@echo "   r2" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   match-leak-kinds: reachable" >> $(VALGRIND_SUPP)
	@echo "   fun:malloc" >> $(VALGRIND_SUPP)
	@echo "   obj:/usr/*" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "" >> $(VALGRIND_SUPP)
	@echo "{" >> $(VALGRIND_SUPP)
	@echo "   r3" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   match-leak-kinds: reachable" >> $(VALGRIND_SUPP)
	@echo "   fun:calloc" >> $(VALGRIND_SUPP)
	@echo "   obj:/usr/*" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)

.PHONY: gdb_file valgrind_file